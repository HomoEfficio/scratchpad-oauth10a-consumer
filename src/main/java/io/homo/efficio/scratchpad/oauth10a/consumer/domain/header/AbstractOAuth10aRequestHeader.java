package io.homo.efficio.scratchpad.oauth10a.consumer.domain.header;

import io.homo.efficio.scratchpad.oauth10a.consumer.util.OAuth10aConstants;
import lombok.Data;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Map;

/**
 * @author homo.efficio@gmail.com
 * Created on 2018-08-18.
 */
@Data
public abstract class AbstractOAuth10aRequestHeader {

    protected String httpMethod;

    protected String scheme;

    protected String serverName;

    protected int serverPort;

    protected String serverUrl;

    protected String queryString;

    protected String contentType;

    protected String requestBody;

    protected String oauthConsumerKey;

    protected String oauthConsumerSecret;

    //   A nonce is a random string, uniquely generated by the client to allow
    //   the server to verify that a request has never been made before and
    //   helps prevent replay attacks when requests are made over a non-secure
    //   channel.  The nonce value MUST be unique across all requests with the
    //   same timestamp, client credentials, and token combinations.
    //   The parameter MAY be omitted when using the "PLAINTEXT" signature method.
    protected String oauthNonce;

    protected String oauthSignature;

    protected String oauthSignatureMethod = OAuth10aConstants.OAUTH_SIGNATURE_METHOD_HMAC_SHA1;

    //   The timestamp value MUST be a positive integer.  Unless otherwise
    //   specified by the server's documentation, the timestamp is expressed
    //   in the number of seconds since January 1, 1970 00:00:00 GMT.
    //   The parameter MAY be omitted when using the "PLAINTEXT" signature method.
    protected String oauthTimestamp;

    protected String oauthVersion = OAuth10aConstants.OAUTH_VERSION_1_0;

    public AbstractOAuth10aRequestHeader() {
    }

    protected String getRequestBody(HttpServletRequest request) {
        try {
            final BufferedReader reader = request.getReader();
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
            return sb.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public abstract String getRequestHeader();

    public abstract String getKey();

    public abstract Map<String, String> getRequestHeaderMap();
}
